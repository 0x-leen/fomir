// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

generator client {
  provider = "prisma-client-js"
}

model Site {
  id           String   @id @default(uuid())
  name         String
  description  String   @default("") @db.Text
  about        String   @default("") @db.Text
  logo         String?  @default("https://public.blob.vercel-storage.com/eEZHAoPTOBSYGBE3/JRajRyC-PhBHEinQkupt02jqfKacBVHLWJq7Iy.png") @db.Text
  font         String   @default("font-cal")
  image        String?  @default("") @db.Text
  socials      Json?
  config       Json?
  subdomain    String?  @unique
  customDomain String?  @unique
  memberCount  Int      @default(0)
  postCount    Int      @default(0)
  message404   String?  @default("Blimey! You've found a page that doesn't exist.") @db.Text
  themeName    String   @default("")
  symbolName   String?  @unique
  spaceAddress String?  @unique // space on chain address
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id            String    @id @default(uuid())
  address       String    @unique
  name          String?
  ensName       String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  posts         Post[]
  comments      Comment[]

  @@index([id])
  @@index([address])
}

enum PostType {
  ARTICLE
  IMAGE
  VIDEO
  AUDIO
  NFT
  FIGMA
}

enum GateType {
  FREE
  MEMBER_ONLY
}

enum PostStatus {
  PUBLISHED
  DRAFT
  ARCHIVED
}

model Post {
  id          String     @id @default(uuid())
  title       String     @default("") @db.Text
  description String     @default("") @db.Text
  content     String     @default("") @db.Text
  slug        String     @default(uuid())
  type        PostType   @default(ARTICLE)
  gateType    GateType   @default(FREE)
  status      PostStatus @default(DRAFT)
  image       String?    @default("") @db.Text
  publishedAt DateTime   @default(now())
  archivedAt  DateTime   @default(now())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  Comment     Comment[]

  @@index([userId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
}
